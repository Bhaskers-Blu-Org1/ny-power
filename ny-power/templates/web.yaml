# The web.yaml specifies everything needed for bringing up the web
# service that serves the console pages. This needs a bit of trickery
# as it needs to expose the LB ip address for the MQTT server. That
# requires kubernetes API calls to look it up, and the ability to
# store it somewhere (we put it in a secret). To be secure this is
# done with a dedicated service account and an init container.
---
# A service account is provisioned for security purposes.
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ template "ny-power.fullname" . }}-readersa
  labels:
    app: {{ template "ny-power.name" . }}-readersa
    chart: {{ template "ny-power.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
# For the service account to have access to the IBM Cloud Container
# Registry, it needs these additional secrets.
imagePullSecrets:
- name: bluemix-default-secret
- name: bluemix-default-secret-regional
- name: bluemix-default-secret-international
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  namespace: default
  name: {{ template "ny-power.fullname" . }}-services-reader
  labels:
    app: {{ template "ny-power.name" . }}-services-reader
    chart: {{ template "ny-power.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
# These rules allow us to make the service query, and write access to
# secrets. Delete is also granted so that we replace the secret on
# every boot, in case there have been service changes since the last
# web startup.
rules:
- apiGroups: [""]
  resources: ["services"]
  verbs: ["get"]
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["create", "delete"]
---
# Standard role binding, connect these together.
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: {{ template "ny-power.fullname" . }}-read-services
  namespace: default
  labels:
    app: {{ template "ny-power.name" . }}-read-services
    chart: {{ template "ny-power.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
subjects:
- kind: ServiceAccount
  name: {{ template "ny-power.fullname" . }}-readersa
  namespace: default
roleRef:
  kind: Role
  name: {{ template "ny-power.fullname" . }}-services-reader
  apiGroup: ""
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "ny-power.fullname" . }}-web
  labels:
    app: {{ template "ny-power.name" . }}-web
    chart: {{ template "ny-power.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ template "ny-power.name" . }}-web
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "ny-power.name" . }}-web
        release: {{ .Release.Name }}
    spec:
      revisionHistoryLimit: 2
      serviceAccountName: {{ template "ny-power.fullname" . }}-readersa
      # An initContainer is used here with the kubectl tools installed
      # to do the kube API query before we boot up.
      initContainers:
      - name: {{ template "ny-power.fullname" . }}-web-init
        image: "{{ .Values.image.repository }}/{{.Values.ibmCloud.image.name }}:{{.Values.ibmCloud.image.version }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        command: ["/root/setvalue.sh"]
        env:
          - name: MQTT_CONTAINER_NAME
            value: {{ template "ny-power.fullname" . }}-mqtt
          - name: MQTT_SECRET_NAME
            value: {{ template "ny-power.fullname" . }}-mqtt
      containers:
      - name: {{ template "ny-power.fullname" . }}-web
        image: "{{ .Values.image.repository }}/{{.Values.web.image.name }}:{{.Values.web.image.version }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        ports:
        - containerPort: 80
        env:
          {{- if .Values.web.google_analytics }}
          - name: GOOGLE_ANALYTICS
            value: "{{ .Values.web.google_analytics }}"
          {{- end }}
          - name: INFLUXDB_HOST
            value: {{ template "ny-power.fullname" . }}-influx
          - name: MQTT_HOST
            valueFrom:
              secretKeyRef:
                name: {{ template "ny-power.fullname" . }}-mqtt
                key: host
          - name: MQTT_PUMP_PASS
            valueFrom:
              secretKeyRef:
                name: {{ template "ny-power.fullname" . }}-mqtt-pump
                key: password
        readinessProbe:
          httpGet:
            path: /
            port: 5000
          initialDelaySeconds: 15
          timeoutSeconds: 1

---
apiVersion: v1
kind: Service
metadata:
  name: {{ template "ny-power.fullname" . }}-web
  labels:
    app: {{ template "ny-power.name" . }}-web
    chart: {{ template "ny-power.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  ports:
  - port: 80
    targetPort: 5000
    name: {{ template "ny-power.fullname" . }}-web
    protocol: TCP
  selector:
    app: {{ template "ny-power.name" . }}-web
    release: {{ .Release.Name }}
---
{{- if .Values.enable_istio2 }}
apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: {{ template "ny-power.fullname" . }}-gateway
  labels:
    app: {{ template "ny-power.name" . }}-gateway
    chart: {{ template "ny-power.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  selector:
    istio: ingressgateway # use istio default controller
  servers:
  - port:
      number: 80
      name: http
      protocol: HTTP
    hosts:
    - "*"
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: {{ template "ny-power.fullname" . }}-virtual-service-www
  labels:
    app: {{ template "ny-power.name" . }}-virtual-service-www
    chart: {{ template "ny-power.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  hosts:
    - '*'
  gateways:
    - {{ template "ny-power.fullname" . }}-gateway
  http:
    - route:
        - destination:
            host: {{ template "ny-power.fullname" . }}-web
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: istio
  name: {{ template "ny-power.fullname" . }}-www-ingress
  labels:
    app: {{ template "ny-power.name" . }}-www-ingress
    chart: {{ template "ny-power.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  rules:
  {{- range .Values.ingress.hostnames }}
  - host: {{ . }}
    http:
      paths:
      - path: /
        backend:
          serviceName: {{ template "ny-power.fullname" $ }}-web
          servicePort: 80
  {{- end }}
{{- else }}
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: {{ template "ny-power.fullname" . }}-www-ingress
  labels:
    app: {{ template "ny-power.name" . }}-www-ingress
    chart: {{ template "ny-power.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  rules:
  {{- range .Values.ingress.hostnames }}
  - host: {{ . }}
    http:
      paths:
      - path: /
        backend:
          serviceName: {{ template "ny-power.fullname" $ }}-web
          servicePort: 80
      - path: "/*"
        backend:
          serviceName: {{ template "ny-power.fullname" $ }}-web
          servicePort: 80
  {{- end }}

{{- end }}
